y <- dpois(x, lambda = input$lambda)
data.frame(x = x, y = y)
} else {
if (input$dist == "chisq") {
x <- seq(0, qchisq(0.999, df = input$df_chisq), length.out = 200)
y <- dchisq(x, df = input$df_chisq)
} else {
x <- seq(-4, 4, length.out = 200)
if (input$dist == "norm") {
y <- dnorm(x, mean = input$mean, sd = input$sd)
} else {
y <- dt(x, df = input$df)
}
}
data.frame(x = x, y = y)
}
})
result_values <- reactiveVal(list(x = 0, prob = 0, x_from_p = 0))
observeEvent(input$calculate, {
if (input$dist == "chisq") {
prob <- if (input$prob_type == "greater") {
1 - pchisq(input$x_value, df = input$df_chisq)
} else {
pchisq(input$x_value, df = input$df_chisq)
}
x_from_p <- if (input$prob_type == "greater") {
qchisq(1 - input$prob_value, df = input$df_chisq)
} else {
qchisq(input$prob_value, df = input$df_chisq)
}
} else if (input$dist == "pois") {
prob <- if (input$prob_type_disc == "greater_eq") {
1 - ppois(input$x_value - 1, lambda = input$lambda)
} else if (input$prob_type_disc == "less_eq") {
ppois(input$x_value, lambda = input$lambda)
} else {
dpois(input$x_value, lambda = input$lambda)
}
x_from_p <- if (input$prob_type_disc == "greater_eq") {
qpois(1 - input$prob_value, lambda = input$lambda)
} else if (input$prob_type_disc == "less_eq") {
qpois(input$prob_value, lambda = input$lambda)
} else {
NA
}
} else {
if (input$dist == "norm") {
prob <- if (input$prob_type == "greater") {
1 - pnorm(input$x_value, input$mean, input$sd)
} else if (input$prob_type == "less") {
pnorm(input$x_value, input$mean, input$sd)
} else {
2 * (1 - pnorm(abs(input$x_value), input$mean, input$sd))
}
x_from_p <- if (input$prob_type == "greater") {
qnorm(1 - input$prob_value, input$mean, input$sd)
} else if (input$prob_type == "less") {
qnorm(input$prob_value, input$mean, input$sd)
} else {
qnorm(1 - input$prob_value/2, input$mean, input$sd)
}
} else {
prob <- if (input$prob_type == "greater") {
1 - pt(input$x_value, df = input$df)
} else if (input$prob_type == "less") {
pt(input$x_value, df = input$df)
} else {
2 * (1 - pt(abs(input$x_value), df = input$df))
}
x_from_p <- if (input$prob_type == "greater") {
qt(1 - input$prob_value, df = input$df)
} else if (input$prob_type == "less") {
qt(input$prob_value, df = input$df)
} else {
qt(1 - input$prob_value/2, df = input$df)
}
}
}
result_values(list(x = input$x_value, prob = prob, x_from_p = x_from_p))
})
output$dist_plot <- renderPlot({
data <- dist_data()
x_value <- result_values()$x
if (input$dist == "pois") {
p <- ggplot(data, aes(x = x, y = y)) +
geom_col(fill = "lightblue", color = "black") +
theme_minimal() +
labs(x = "X", y = "Probabilidade") +
theme(text = element_text(size = 14)) +
scale_x_continuous(breaks = seq(0, max(data$x), by = 1))
highlight_data <- data
if (input$prob_type_disc == "greater_eq") {
highlight_data$highlight <- highlight_data$x >= x_value
} else if (input$prob_type_disc == "less_eq") {
highlight_data$highlight <- highlight_data$x <= x_value
} else {
highlight_data$highlight <- highlight_data$x == x_value
}
p <- p + geom_col(data = subset(highlight_data, highlight),
aes(x = x, y = y),
fill = "blue", alpha = 0.3)
} else {
p <- ggplot(data, aes(x = x, y = y)) +
geom_line(size = 1) +
theme_minimal() +
labs(x = "X", y = "Densidade") +
theme(text = element_text(size = 14))
if (input$prob_type == "greater") {
shade_data <- data[data$x >= x_value, ]
} else if (input$prob_type == "less") {
shade_data <- data[data$x <= x_value, ]
} else {
shade_data <- data[abs(data$x) >= abs(x_value), ]
}
p <- p + geom_area(data = shade_data, fill = "blue", alpha = 0.3)
}
p <- p + geom_vline(xintercept = x_value,
linetype = "dashed",
color = "red")
p
})
output$result_text <- renderUI({
t <- translations[[current_lang()]]
res <- result_values()
HTML(sprintf(
"<h4>%s</h4><h4>%s</h4>",
sprintf(t$result_p, res$x, res$prob),
sprintf(t$result_x, input$prob_value, res$x_from_p)
))
})
}
shinyApp(ui, server)
library(shinydashboard)
library(shinymeta)
library(shinythemes)
shinyApp(ui, server)
detach("package:shiny", unload = TRUE)
library(shiny)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
library(bslib)
library(ggplot2)
translations <- list(
pt = list(
title = "Distribui√ß√µes de Probabilidade",
params = "Par√¢metros",
dist = "Distribui√ß√£o:",
mean = "M√©dia:",
sd = "Desvio Padr√£o:",
df = "Graus de Liberdade:",
prob_type = "Tipo de Probabilidade:",
x_value = "Valor de x:",
prob_value = "Probabilidade:",
calculate = "Calcular",
visualization = "Visualiza√ß√£o",
result_x = "X para P = %.4f: %.4f",
result_p = "P(X = %.4f) = %.4f",
input_type = "Entrada por probabilidade:"
),
en = list(
title = "Statistical Distributions",
params = "Parameters",
dist = "Distribution:",
mean = "Mean:",
sd = "Standard Deviation:",
df = "Degrees of Freedom:",
prob_type = "Probability Type:",
x_value = "x value:",
prob_value = "Probability:",
calculate = "Calculate",
visualization = "Visualization",
result_x = "X for P = %.4f: %.4f",
result_p = "P(X = %.4f) = %.4f",
input_type = "Input by probability:"
),
es = list(
title = "Distribuciones Estad√≠sticas",
params = "Par√°metros",
dist = "Distribuci√≥n:",
mean = "Media:",
sd = "Desviaci√≥n Est√°ndar:",
df = "Grados de Libertad:",
prob_type = "Tipo de Probabilidad:",
x_value = "Valor de x:",
prob_value = "Probabilidad:",
calculate = "Calcular",
visualization = "Visualizaci√≥n",
result_x = "X para P = %.4f: %.4f",
result_p = "P(X = %.4f) = %.4f",
input_type = "Entrada por probabilidad:"
)
)
ui <- function(request) {
page_fillable(
theme = bs_theme(version = 5, preset = "shiny"),
# T√≠tulo e controles de l√≠ngua
layout_columns(
col_widths = c(8, 4),
# T√≠tulo principal
h1(textOutput("title"), class = "text-center"),
# Bot√µes de bandeira para sele√ß√£o de l√≠ngua
div(
style = "text-align: right;",
actionButton("lang_pt", "üáßüá∑",
class = "btn btn-link",
style = "font-size: 16px; padding: 0px 4px;"),
actionButton("lang_en", "üá∫üá∏",
class = "btn btn-link",
style = "font-size: 16px; padding: 0px 4px;"),
actionButton("lang_es", "üá™üá∏",
class = "btn btn-link",
style = "font-size: 16px; padding: 0px 4px;")
)
),
layout_columns(
col_widths = c(4, 8),
uiOutput("params_card"),
uiOutput("plot_card")
)
)
}
server <- function(input, output, session) {
# Controle de l√≠ngua
current_lang <- reactiveVal("pt")
observeEvent(input$lang_pt, {
current_lang("pt")
})
observeEvent(input$lang_en, {
current_lang("en")
})
observeEvent(input$lang_es, {
current_lang("es")
})
# T√≠tulo reativo
output$title <- renderText({
translations[[current_lang()]]$title
})
# Card de par√¢metros
output$params_card <- renderUI({
t <- translations[[current_lang()]]
card(
card_header(t$params),
selectInput("dist", t$dist,
choices = c("Normal" = "norm",
"t-Student" = "t",
"Qui-quadrado" = "chisq",
"Poisson" = "pois")),
conditionalPanel(
condition = "input.dist == 'norm'",
numericInput("mean", t$mean, value = 0),
numericInput("sd", t$sd, value = 1, min = 0.1)
),
conditionalPanel(
condition = "input.dist == 't'",
numericInput("df", t$df, value = 5, min = 1)
),
conditionalPanel(
condition = "input.dist == 'pois'",
numericInput("lambda", "Œª:", value = 5, min = 0.1),
selectInput("prob_type_disc", t$prob_type,
choices = c("P(X ‚â• x)" = "greater_eq",
"P(X ‚â§ x)" = "less_eq",
"P(X = x)" = "equal"))
),
conditionalPanel(
condition = "input.dist == 'chisq'",
numericInput("df_chisq", t$df, value = 1, min = 1),
selectInput("prob_type", t$prob_type,
choices = c("P(X > x)" = "greater",
"P(X < x)" = "less"))
),
conditionalPanel(
condition = "input.dist != 'pois' && input.dist != 'chisq'",
selectInput("prob_type", t$prob_type,
choices = c("P(X > x)" = "greater",
"P(X < x)" = "less",
"2P(|X| > x)" = "both"))
),
switchInput("prob_input", t$input_type, value = FALSE),
conditionalPanel(
condition = "!input.prob_input",
numericInput("x_value", t$x_value, value = 0)
),
conditionalPanel(
condition = "input.prob_input",
numericInput("prob_value", t$prob_value, value = 0.95, min = 0, max = 1)
),
actionButton("calculate", t$calculate, class = "btn-primary")
)
})
# Card do gr√°fico
output$plot_card <- renderUI({
t <- translations[[current_lang()]]
card(
card_header(t$visualization),
plotOutput("dist_plot", height = "400px"),
card_footer(
uiOutput("result_text")
)
)
})
dist_data <- reactive({
if (input$dist == "pois") {
x <- 0:max(20, qpois(0.999, input$lambda))
y <- dpois(x, lambda = input$lambda)
data.frame(x = x, y = y)
} else {
if (input$dist == "chisq") {
x <- seq(0, qchisq(0.999, df = input$df_chisq), length.out = 200)
y <- dchisq(x, df = input$df_chisq)
} else {
x <- seq(-4, 4, length.out = 200)
if (input$dist == "norm") {
y <- dnorm(x, mean = input$mean, sd = input$sd)
} else {
y <- dt(x, df = input$df)
}
}
data.frame(x = x, y = y)
}
})
result_values <- reactiveVal(list(x = 0, prob = 0, x_from_p = 0))
observeEvent(input$calculate, {
if (!input$prob_input) {
if (input$dist == "chisq") {
prob <- if (input$prob_type == "greater") {
1 - pchisq(input$x_value, df = input$df_chisq)
} else {
pchisq(input$x_value, df = input$df_chisq)
}
x_from_p <- if (input$prob_type == "greater") {
qchisq(1 - input$prob_value, df = input$df_chisq)
} else {
qchisq(input$prob_value, df = input$df_chisq)
}
} else if (input$dist == "pois") {
prob <- if (input$prob_type_disc == "greater_eq") {
1 - ppois(input$x_value - 1, lambda = input$lambda)
} else if (input$prob_type_disc == "less_eq") {
ppois(input$x_value, lambda = input$lambda)
} else {
dpois(input$x_value, lambda = input$lambda)
}
x_from_p <- if (input$prob_type_disc == "greater_eq") {
qpois(1 - input$prob_value, lambda = input$lambda)
} else if (input$prob_type_disc == "less_eq") {
qpois(input$prob_value, lambda = input$lambda)
} else {
NA
}
} else {
if (input$dist == "norm") {
prob <- if (input$prob_type == "greater") {
1 - pnorm(input$x_value, input$mean, input$sd)
} else if (input$prob_type == "less") {
pnorm(input$x_value, input$mean, input$sd)
} else {
2 * (1 - pnorm(abs(input$x_value), input$mean, input$sd))
}
x_from_p <- if (input$prob_type == "greater") {
qnorm(1 - input$prob_value, input$mean, input$sd)
} else if (input$prob_type == "less") {
qnorm(input$prob_value, input$mean, input$sd)
} else {
qnorm(1 - input$prob_value/2, input$mean, input$sd)
}
} else {
prob <- if (input$prob_type == "greater") {
1 - pt(input$x_value, df = input$df)
} else if (input$prob_type == "less") {
pt(input$x_value, df = input$df)
} else {
2 * (1 - pt(abs(input$x_value), df = input$df))
}
x_from_p <- if (input$prob_type == "greater") {
qt(1 - input$prob_value, df = input$df)
} else if (input$prob_type == "less") {
qt(input$prob_value, df = input$df)
} else {
qt(1 - input$prob_value/2, df = input$df)
}
}
}
result_values(list(x = input$x_value, prob = prob, x_from_p = x_from_p))
} else {
if (input$dist == "chisq") {
x_from_p <- if (input$prob_type == "greater") {
qchisq(1 - input$prob_value, df = input$df_chisq)
} else {
qchisq(input$prob_value, df = input$df_chisq)
}
prob <- input$prob_value
} else if (input$dist == "pois") {
prob <- if (input$prob_type_disc == "greater_eq") {
1 - ppois(input$x_value - 1, lambda = input$lambda)
} else if (input$prob_type_disc == "less_eq") {
ppois(input$x_value, lambda = input$lambda)
} else {
dpois(input$x_value, lambda = input$lambda)
}
x_from_p <- if (input$prob_type_disc == "greater_eq") {
qpois(1 - input$prob_value, lambda = input$lambda)
} else if (input$prob_type_disc == "less_eq") {
qpois(input$prob_value, lambda = input$lambda)
} else {
NA
}
} else {
if (input$dist == "norm") {
x_from_p <- if (input$prob_type == "greater") {
qnorm(1 - input$prob_value, input$mean, input$sd)
} else if (input$prob_type == "less") {
qnorm(input$prob_value, input$mean, input$sd)
} else {
qnorm(1 - input$prob_value/2, input$mean, input$sd)
}
} else {
x_from_p <- if (input$prob_type == "greater") {
qt(1 - input$prob_value, df = input$df)
} else if (input$prob_type == "less") {
qt(input$prob_value, df = input$df)
} else {
qt(1 - input$prob_value/2, df = input$df)
}
}
prob <- input$prob_value
}
result_values(list(x = x_from_p, prob = prob, x_from_p = x_from_p))
}
})
output$dist_plot <- renderPlot({
data <- dist_data()
x_value <- result_values()$x
if (input$dist == "pois") {
p <- ggplot(data, aes(x = x, y = y)) +
geom_col(fill = "lightblue", color = "black") +
theme_minimal() +
labs(x = "X", y = "Probabilidade") +
theme(text = element_text(size = 14)) +
scale_x_continuous(breaks = seq(0, max(data$x), by = 1))
highlight_data <- data
if (input$prob_type_disc == "greater_eq") {
highlight_data$highlight <- highlight_data$x >= x_value
} else if (input$prob_type_disc == "less_eq") {
highlight_data$highlight <- highlight_data$x <= x_value
} else {
highlight_data$highlight <- highlight_data$x == x_value
}
p <- p + geom_col(data = subset(highlight_data, highlight),
aes(x = x, y = y),
fill = "blue", alpha = 0.3)
} else {
p <- ggplot(data, aes(x = x, y = y)) +
geom_line(size = 1) +
theme_minimal() +
labs(x = "X", y = "Densidade") +
theme(text = element_text(size = 14))
if (input$prob_type == "greater") {
shade_data <- data[data$x >= x_value, ]
p <- p + geom_area(data = shade_data, fill = "blue", alpha = 0.3)
} else if (input$prob_type == "less") {
shade_data <- data[data$x <= x_value, ]
p <- p + geom_area(data = shade_data, fill = "blue", alpha = 0.3)
} else {
# √Årea bilateral: sombrear as duas caudas
shade_data_left <- data[data$x <= -abs(x_value), ]
shade_data_right <- data[data$x >= abs(x_value), ]
p <- p +
geom_area(data = shade_data_left, fill = "blue", alpha = 0.3) +
geom_area(data = shade_data_right, fill = "blue", alpha = 0.3)
}
p <- p + geom_vline(xintercept = x_value,
linetype = "dashed",
color = "red")
# Adicionar linha vertical em -x para o caso bilateral
if (input$prob_type == "both") {
p <- p + geom_vline(xintercept = -x_value,
linetype = "dashed",
color = "red")
}
}
p
})
output$result_text <- renderUI({
t <- translations[[current_lang()]]
res <- result_values()
HTML(sprintf(
"<h4>%s</h4><h4>%s</h4>",
sprintf(t$result_p, res$x, res$prob),
sprintf(t$result_x, input$prob_value, res$x_from_p)
))
})
}
switchInput <- function(inputId, label, value = FALSE) {
div(
class = "form-check form-switch mb-3",
tags$input(
class = "form-check-input",
type = "checkbox",
id = inputId,
checked = if(value) "checked" else NULL
),
tags$label(
class = "form-check-label",
`for` = inputId,
label
)
)
}
shinyApp(ui, server)
