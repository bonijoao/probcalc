if (input$dist == "norm") {
validate(
need(input$sd > 0, t()$norm_error)
)
y <- dnorm(x, mean = input$mean, sd = input$sd)
} else {
validate(
need(input$df > 0, t()$t_error)
)
y <- dt(x, df = input$df)
}
}
data.frame(x = x, y = y)
}
})
result_values <- reactiveVal(list(x = 0, prob = 0, x_from_p = 0))
observeEvent(input$calculate, {
if (input$dist == "nbin1") {
validate_nbin1 <- function() {
if (input$nbin1_r < 1 || input$nbin1_r != round(input$nbin1_r)) {
return(t()$nbin1_error)
}
if (input$nbin1_p <= 0 || input$nbin1_p > 1) {
return(t()$nbin1_error)
}
if (!input$prob_input && (input$x_value < input$nbin1_r || input$x_value != round(input$x_value))) {
return(t()$nbin1_error)
}
return(NULL)
}
error_msg <- validate_nbin1()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
} else if (input$dist == "nbin2") {
validate_nbin2 <- function() {
if (input$nbin2_r < 1 || input$nbin2_r != round(input$nbin2_r)) {
return(t()$nbin2_error)
}
if (input$nbin2_p <= 0 || input$nbin2_p > 1) {
return(t()$nbin2_error)
}
if (!input$prob_input && (input$x_value < 0 || input$x_value != round(input$x_value))) {
return(t()$nbin2_error)
}
return(NULL)
}
error_msg <- validate_nbin2()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
}
if (input$dist == "hyper") {
validate_hyper <- function() {
if (input$hyper_N < 1 || input$hyper_N != round(input$hyper_N)) {
return(t()$hyper_error)
}
if (input$hyper_K < 1 || input$hyper_K > input$hyper_N || input$hyper_K != round(input$hyper_K)) {
return(t()$hyper_error)
}
if (input$hyper_n < 1 || input$hyper_n > input$hyper_N || input$hyper_n != round(input$hyper_n)) {
return(t()$hyper_error)
}
x_min <- max(0, input$hyper_n - (input$hyper_N - input$hyper_K))
x_max <- min(input$hyper_n, input$hyper_K)
if (!input$prob_input && (input$x_value < x_min || input$x_value > x_max || input$x_value != round(input$x_value))) {
return(t()$hyper_error)
}
return(NULL)
}
error_msg <- validate_hyper()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
}
if (input$dist == "binom") {
validate_binom <- function() {
if (input$binom_n < 1 || input$binom_n != round(input$binom_n)) {
return(t()$binom_error)
}
if (input$binom_p < 0 || input$binom_p > 1) {
return(t()$binom_error)
}
if (!input$prob_input && (input$x_value < 0 || input$x_value > input$binom_n || input$x_value != round(input$x_value))) {
return(t()$binom_error)
}
return(NULL)
}
error_msg <- validate_binom()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
}
if (input$dist == "pareto") {
validate_pareto <- function() {
if (input$pareto_m <= 0) {
return(t()$pareto_error)
}
if (input$pareto_alpha <= 0) {
return(t()$pareto_error)
}
if (!input$prob_input && input$x_value < input$pareto_m) {
return(t()$pareto_error)
}
return(NULL)
}
error_msg <- validate_pareto()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
}
if (input$dist == "weibull") {
validate_weibull <- function() {
if (input$weibull_alpha <= 0) {
return(t()$weibull_error)
}
if (input$weibull_beta <= 0) {
return(t()$weibull_error)
}
if (!input$prob_input && input$x_value <= 0) {
return(t()$weibull_error)
}
return(NULL)
}
error_msg <- validate_weibull()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
}
if (input$dist == "geom1") {
validate_geom1 <- function() {
if (input$geom1_p <= 0 || input$geom1_p > 1) {
return(t()$geom1_error)
}
if (!input$prob_input && (input$x_value < 1 || input$x_value != round(input$x_value))) {
return(t()$geom1_error)
}
return(NULL)
}
error_msg <- validate_geom1()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
} else if (input$dist == "geom2") {
validate_geom2 <- function() {
if (input$geom2_p <= 0 || input$geom2_p > 1) {
return(t()$geom2_error)
}
if (!input$prob_input && (input$x_value < 0 || input$x_value != round(input$x_value))) {
return(t()$geom2_error)
}
return(NULL)
}
error_msg <- validate_geom2()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
}
if (input$dist == "norm") {
validate_norm <- function() {
if (input$sd <= 0) {
return(t()$norm_error)
}
return(NULL)
}
error_msg <- validate_norm()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
} else if (input$dist == "t") {
validate_t <- function() {
if (input$df <= 0) {
return(t()$t_error)
}
return(NULL)
}
error_msg <- validate_t()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
} else if (input$dist == "chisq") {
validate_chisq <- function() {
if (input$df_chisq <= 0) {
return(t()$chisq_error)
}
return(NULL)
}
error_msg <- validate_chisq()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
} else if (input$dist == "f") {
validate_f <- function() {
if (input$df1 <= 0 || input$df2 <= 0) {
return(t()$f_error)
}
return(NULL)
}
error_msg <- validate_f()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
} else if (input$dist == "gamma") {
validate_gamma <- function() {
if (input$gamma_shape <= 0 || input$gamma_rate <= 0) {
return(t()$gamma_error)
}
return(NULL)
}
error_msg <- validate_gamma()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
} else if (input$dist == "lnorm") {
validate_lnorm <- function() {
if (input$sdlog <= 0) {
return(t()$lnorm_error)
}
return(NULL)
}
error_msg <- validate_lnorm()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
} else if (input$dist == "beta") {
validate_beta <- function() {
if (input$alpha <= 0 || input$beta <= 0) {
return(t()$beta_error)
}
if (!input$prob_input && (input$x_value < 0 || input$x_value > 1)) {
return(t()$beta_error)
}
return(NULL)
}
error_msg <- validate_beta()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
} else if (input$dist == "exp") {
validate_exp <- function() {
if (input$lambda_exp <= 0) {
return(t()$exp_error)
}
if (!input$prob_input && input$x_value < 0) {
return(t()$exp_error)
}
return(NULL)
}
error_msg <- validate_exp()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
} else if (input$dist == "pois") {
validate_pois <- function() {
if (input$lambda <= 0) {
return(t()$pois_error)
}
if (!input$prob_input && (input$x_value < 0 || input$x_value != round(input$x_value))) {
return(t()$pois_error)
}
return(NULL)
}
error_msg <- validate_pois()
if (!is.null(error_msg)) {
showNotification(error_msg, type = "error")
return()
}
}
if (!input$prob_input) {
if (input$dist == "hyper") {
prob <- if (input$prob_type_disc == "greater_eq") {
1 - phyper(input$x_value - 1, input$hyper_K, input$hyper_N - input$hyper_K, input$hyper_n)
} else if (input$prob_type_disc == "less_eq") {
phyper(input$x_value, input$hyper_K, input$hyper_N - input$hyper_K, input$hyper_n)
} else {
dhyper(input$x_value, input$hyper_K, input$hyper_N - input$hyper_K, input$hyper_n)
}
x_from_p <- if (input$prob_type_disc == "greater_eq") {
qhyper(1 - input$prob_value, input$hyper_K, input$hyper_N - input$hyper_K, input$hyper_n)
} else if (input$prob_type_disc == "less_eq") {
qhyper(input$prob_value, input$hyper_K, input$hyper_N - input$hyper_K, input$hyper_n)
} else {
NA
}
}
result_values(list(x = input$x_value, prob = prob, x_from_p = x_from_p))
} else {
if (input$dist == "pareto") {
x_from_p <- if (input$prob_type == "greater") {
qpareto(1 - input$prob_value, input$pareto_m, input$pareto_alpha)
} else {
qpareto(input$prob_value, input$pareto_m, input$pareto_alpha)
}
prob <- input$prob_value
} else if (input$dist == "lnorm") {
x_from_p <- if (input$prob_type == "greater") {
qlnorm(1 - input$prob_value, meanlog = input$meanlog, sdlog = input$sdlog)
} else {
qlnorm(input$prob_value, meanlog = input$meanlog, sdlog = input$sdlog)
}
prob <- input$prob_value
} else if (input$dist == "f") {
x_from_p <- if (input$prob_type == "greater") {
qf(1 - input$prob_value, df1 = input$df1, df2 = input$df2)
} else {
qf(input$prob_value, df1 = input$df1, df2 = input$df2)
}
prob <- input$prob_value
} else if (input$dist == "chisq") {
x_from_p <- if (input$prob_type == "greater") {
qchisq(1 - input$prob_value, df = input$df_chisq)
} else {
qchisq(input$prob_value, df = input$df_chisq)
}
prob <- input$prob_value
} else if (input$dist == "pois") {
prob <- if (input$prob_type_disc == "greater_eq") {
1 - ppois(input$x_value - 1, lambda = input$lambda)
} else if (input$prob_type_disc == "less_eq") {
ppois(input$x_value, lambda = input$lambda)
} else {
dpois(input$x_value, lambda = input$lambda)
}
x_from_p <- if (input$prob_type_disc == "greater_eq") {
qpois(1 - input$prob_value, lambda = input$lambda)
} else if (input$prob_type_disc == "less_eq") {
qpois(input$prob_value, lambda = input$lambda)
} else {
NA
}
} else if (input$dist == "beta") {
prob <- if (input$prob_type == "greater") {
1 - pbeta(input$x_value, shape1 = input$alpha, shape2 = input$beta)
} else if (input$prob_type == "less") {
pbeta(input$x_value, shape1 = input$alpha, shape2 = input$beta)
} else {
2 * min(pbeta(input$x_value, shape1 = input$alpha, shape2 = input$beta),
1 - pbeta(input$x_value, shape1 = input$alpha, shape2 = input$beta))
}
x_from_p <- if (input$prob_type == "greater") {
qbeta(1 - input$prob_value, shape1 = input$alpha, shape2 = input$beta)
} else if (input$prob_type == "less") {
qbeta(input$prob_value, shape1 = input$alpha, shape2 = input$beta)
} else {
qbeta(1 - input$prob_value/2, shape1 = input$alpha, shape2 = input$beta)
}
} else if (input$dist == "exp") {
x_from_p <- if (input$prob_type == "greater") {
qexp(1 - input$prob_value, rate = input$lambda_exp)
} else {
qexp(input$prob_value, rate = input$lambda_exp)
}
prob <- input$prob_value
} else if (input$dist == "gamma") {
x_from_p <- if (input$prob_type == "greater") {
qgamma(1 - input$prob_value, shape = input$gamma_shape, rate = input$gamma_rate)
} else {
qgamma(input$prob_value, shape = input$gamma_shape, rate = input$gamma_rate)
}
prob <- input$prob_value
} else if (input$dist == "weibull") {
x_from_p <- if (input$prob_type == "greater") {
qweibull(1 - input$prob_value, shape = input$weibull_alpha, scale = input$weibull_beta)
} else {
qweibull(input$prob_value, shape = input$weibull_alpha, scale = input$weibull_beta)
}
prob <- input$prob_value
} else if (input$dist == "geom1") {
x_from_p <- if (input$prob_type == "greater") {
qgeom(1 - input$prob_value, prob = input$geom1_p) + 1
} else if (input$prob_type == "less") {
qgeom(input$prob_value, prob = input$geom1_p) + 1
} else {
NA
}
} else if (input$dist == "geom2") {
x_from_p <- if (input$prob_type == "greater") {
qgeom(1 - input$prob_value, prob = input$geom2_p)
} else if (input$prob_type == "less") {
qgeom(input$prob_value, prob = input$geom2_p)
} else {
NA
}
} else {
if (input$dist == "norm") {
x_from_p <- if (input$prob_type == "greater") {
qnorm(1 - input$prob_value, input$mean, input$sd)
} else if (input$prob_type == "less") {
qnorm(input$prob_value, input$mean, input$sd)
} else {
qnorm(1 - input$prob_value/2, input$mean, input$sd)
}
} else {
x_from_p <- if (input$prob_type == "greater") {
qt(1 - input$prob_value, df = input$df)
} else if (input$prob_type == "less") {
qt(input$prob_value, df = input$df)
} else {
qt(1 - input$prob_value/2, df = input$df)
}
}
prob <- input$prob_value
}
result_values(list(x = x_from_p, prob = prob, x_from_p = x_from_p))
}
})
output$dist_plot <- renderPlot({
data <- dist_data()
x_value <- result_values()$x
if (input$dist %in% c("pois", "binom", "geom1", "geom2", "hyper", "nbin1", "nbin2")) {  # Adicione todas as distribuições discretas aqui
p <- ggplot(data, aes(x = x, y = y)) +
geom_col(fill = "lightblue", color = "black") +
theme_minimal() +
labs(x = "X", y = "Probabilidade") +
theme(text = element_text(size = 14))
highlight_data <- data
highlight_data$highlight <- FALSE
if (input$prob_type_disc == "greater_eq") {
highlight_data$highlight <- highlight_data$x >= x_value
} else if (input$prob_type_disc == "less_eq") {
highlight_data$highlight <- highlight_data$x <= x_value
} else {
highlight_data$highlight <- highlight_data$x == x_value
}
p <- p + geom_col(data = subset(highlight_data, highlight),
aes(x = x, y = y),
fill = "blue", alpha = 0.3)
} else {
p <- ggplot(data, aes(x = x, y = y)) +
geom_line(size = 1) +
theme_minimal() +
labs(x = "X", y = "Densidade") +
theme(text = element_text(size = 14))
if (input$prob_type == "greater") {
shade_data <- data[data$x >= x_value, ]
p <- p + geom_area(data = shade_data, fill = "blue", alpha = 0.3)
} else if (input$prob_type == "less") {
shade_data <- data[data$x <= x_value, ]
p <- p + geom_area(data = shade_data, fill = "blue", alpha = 0.3)
} else {
# Área bilateral: sombrear as duas caudas
shade_data_left <- data[data$x <= -abs(x_value), ]
shade_data_right <- data[data$x >= abs(x_value), ]
p <- p +
geom_area(data = shade_data_left, fill = "blue", alpha = 0.3) +
geom_area(data = shade_data_right, fill = "blue", alpha = 0.3)
}
p <- p + geom_vline(xintercept = x_value,
linetype = "dashed",
color = "red")
# Adicionar linha vertical em -x para o caso bilateral
if (input$prob_type == "both") {
p <- p + geom_vline(xintercept = -x_value,
linetype = "dashed",
color = "red")
}
}
p
})
output$result_text <- renderUI({
t <- t()
res <- result_values()
HTML(sprintf(
"<h4>%s</h4>",
sprintf(t$result_p, res$x, res$prob)
))
})
}
switchInput <- function(inputId, label, value = FALSE) {
div(
class = "form-check form-switch mb-3",
tags$input(
class = "form-check-input",
type = "checkbox",
id = inputId,
checked = if(value) "checked" else NULL
),
tags$label(
class = "form-check-label",
`for` = inputId,
label
)
)
}
dpareto <- function(x, m, alpha) {
ifelse(x >= m, alpha * m^alpha / x^(alpha + 1), 0)
}
ppareto <- function(q, m, alpha) {
ifelse(q >= m, 1 - (m/q)^alpha, 0)
}
qpareto <- function(p, m, alpha) {
m / (1 - p)^(1/alpha)
}
shinyApp(ui, server)
runApp('probability distribuiton.R')
runApp('probability distribuiton.R')
